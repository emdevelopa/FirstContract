{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n    using priceConverter for uint256;\n\n    uint256 public minUSD = 50 * 1e18;\n\n    address[] public funders;\n\n    mapping(address => uint256) public addressToAmountFund;\n\n    address public owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n\n        priceFeed = AggregatorV3Interface(\n            priceFeedAddress \n        );\n    }\n\n    function fundme() public payable {\n        require(\n            msg.value.getConvertionRate(priceFeed) >= minUSD,\n            \"Send more than 1 eth\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFund[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFund[funder] = 0;\n        }\n\n        funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"The sender is not the owner\");\n        _;\n    }\n\n    receive() external payable {\n        fundme();\n    }\n\n    fallback() external payable {\n        fundme();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary priceConverter {\n    // Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n        \n\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n\n        return uint256(answer * 1e10);\n    }\n\n    function getConvertionRate(\n        uint256 ethAmmount, AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n\n        uint256 ethAmountInUSD = (ethPrice * ethAmmount) / 1e18;\n        return ethAmountInUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}